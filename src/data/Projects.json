[
    {
        "id": "1",
        "name": "InView",
        "description": "InView is a web application that helps the Users to manage their investments in stocks and other openly traded securities. Its connected to a realtime stock API to calculates the return on investment based on the past investments.",
        "longText": "# InView üåê \n\n**InView** is a web application designed to track investments across the stock market. \n\n- **Frontend**: React, TypeScript, ChakraUI \n- **Backend**: Express.js, TypeScript, Firebase \n- **API**: Polygon (Stock Market API) \n\n## IDPA Project üéì \n\nThis project was created as my final project (IDPA) for my diploma at BBW / KBW. It was a technical group project, mixing real-world problem-solving and programming to build a useful application. This project was planned and implemented over several weeks. Our team consisted of: \n\n- **Leonard Roch**: Lead Developer \n- **Sanju Para**: Documentation/Ideas \n- **Me**: Developer \n\n## My Contribution \n\n### Planning & Design \n\nDuring the planning phase, I researched how other investment platforms are designed and function. I also evaluated several finance APIs to determine which would best meet our needs. After testing a few, we decided to integrate the **Polygon API**. \n\n### Implementation \n\nI was responsible for creating the homepage and utility pages to provide a professional look and feel. Following that, I focused on building the **Investment Dashboard**. Leveraging the knowledge I gained during my market research, I implemented a first draft of the design with reusable components and diagrams. The application was designed to be flexible, allowing it to support various types of investments beyond just stocks. \n\n## Goals and Challenges üéØ \n\n### Real-Time Data \n\n- **Goal**: We wanted to connect to the live stock market and update data in real-time. \n- **Challenge**: Our chosen API had a rate limit of 5 calls per minute. \n- **Solution**: We implemented a cron job that periodically checks the database and refetches new data for tracked stocks daily, ensuring data stays updated without exceeding the API rate limits. \n\n### Design \n\n- **Goal**: Create a sleek and responsive design. \n- **Challenge**: No one on the team had strong design skills. \n- **Solution**: We conducted multiple design \"sprints\" where each team member created mockups and designs. We then reviewed and rated each other‚Äôs work, leading to gradual improvements and a polished final product. \n\n## Development Process üöÄ \n\n### Workflow \n\nWe worked in weekly sprints. During our Friday meetings, we discussed and planned the upcoming tasks. To improve efficiency, Leonard and I primarily handled the programming and implementation, while Sanju focused on research and documentation.",
        "coverImage": "../../assets/Projects/Cover/InView.png",
        "repo": "https://github.com/IDPA-2024b/Nr.7_Investitionsrechner",
        "live": "https://bb-in-view.web.app/",
        "colorScheme": "teal.400",
        "tags": [
            "Fullstack",
            "React",
            "Node.js",
            "Firebase",
            "Express",
            "FinAPI"
        ]
    },
    {
        "id": "2",
        "name": "MostLikely",
        "description": "MostLikely is a full-stack web app built with React and Express.js. It‚Äôs a multiplayer game featuring a simple yet fun game loop, where players create and answer questions about who is \"most likely\" to do something. Real-time interaction between players is handled through socket.io.",
        "longText": "# MostLikely üéÆ \n\n**MostLikey** is a text-based multiplayer game to have a laugh with your friends.  \n\n- **Frontend**: React, TypeScript, ChakraUI \n- **Backend**: Express.js, JavaScript \n- **Hosting**: Firebase, Render \n\n## Reason for Creation üåü \n\nAfter the IDPA, I had looked at a bit of **socket.io** and got interested. After reading about it a bit more, I also wanted to create a multiplayer game with it, like many others did. Me and my friends played a lot of such text-based web multiplayer games in our free time, so I thought, *Why not create my own with the knowledge I had?* \n\n## My Contribution \n\nThis was a solo project, so I did everything on my own.  \n\n### Implementation \n\nBefore creating the app itself, I looked at WebSockets and implemented a simple chat app with it to understand how sockets work and what they are used for. After that, I worked on the backend and frontend simultaneously, so I was able to test the backend directly with the frontend. \n\n## Goals and Challenges üéØ \n\n### Real-Time Game Updates \n\n- **Goal**: The game should update on each connected device as soon as something happens in the lobby. \n- **Challenge**: I implemented a different \"route\" for each game event, as you would in a REST API, which bloated the code a bit and made it pretty hard to read. \n- **Solution**: Instead of having a \"delete\" and \"winning\" event, I switched to a few main events like a lobby join, etc., and implemented an **updateGameState** event, which would handle all the other interactions between players (not the best way, but a simple and easy way). \n\n### Testing üß™ \n\n- **Goal**: Being able to test the game loop quickly and efficiently. \n- **Challenge**: I only tested the app by hand, which was pretty annoying because I had to play through a game each time to get to the desired testing spot. \n- **Solution**: Sadly, I only found out about things like **Cypress** later, so I actually tested everything on my own. \n\n## Development Process üöÄ \n\n### Workflow \n\nI created this right after the IDPA during Spring break to have it ready to show my friends when school started again. I didn't have any kind of development plan and just firstly thought about game state handling and how I would send updates to the clients. After that, I just started implementing. \n\nI know that this isn‚Äôt the best way to handle a project, but for me, it‚Äôs the best way to learn because I learn the most by simply doing and failing over and over until there is a finished product.",
        "coverImage": "../../assets/Projects/Cover/MostLikely.png",
        "repo": "https://github.com/DaniDevOfficial/MostLikelyBackend",
        "live": "https://mostlikelywish.web.app/",
        "colorScheme": "pink.300",
        "tags": [
            "Fullstack",
            "React",
            "Socket.io",
            "Real-time",
            "Multiplayer"
        ]
    },
    {
        "id": "3",
        "name": "Eastern Front Blog",
        "description": "Eastern Front Blog is a React and Firebase-powered news site covering the Ukraine war, featuring a timeline, articles, and role-based content management",
        "longText": "# Eastern Front Blog üåçüì∞ \n\n**Eastern Front Blog** is a news website about the war in Ukraine and its history. \n\n- **Frontend**: React, TypeScript, ChakraUI \n- **Backend**: Firebase \n\n## PaW üõ†Ô∏è \n\nThis project was created in the PaW class, where we had to create a website about a major event in the current world. We chose the war in Ukraine as our topic and decided to create a news-like website about the conflict. \n\n- **Leonard Roch**: Lead, Developer, Design \n- **Sanju Para**: Research, Design \n- **Me**: Developer, Research, Design \n\n### Planning & Design \n\nWe first spent some time on the design to avoid problems later during implementation. For the design process, we iterated over each design repeatedly until we achieved what we wanted. We also planned some features we wanted to implement and added some to the backlog that would be nice to have but had no concrete plan for implementation. \n\n## My Contribution \n\n### Design \n\nDuring our design sprints, I created base layouts and ideas for how we could structure the entire website. \n\n### Implementation \n\nL√©onard and I worked together on most of the frontend. My main focus was the app itself, including the landing page, timeline, and single article pages. \n\n## Goals and Challenges üéØ \n\n### New Articles \n\n- **Goal**: We wanted to have a way to easily upload new articles without redeploying the site. \n- **Challenge**: We had no idea how to authenticate a user to ensure only authorized people could create new articles. \n- **Solution**: Using Firebase, we implemented a simple Google login with an account system, where a user could have different roles like \"admin,\" \"author,\" and \"user.\" \n\n### Design \n\n- **Goal**: Create a sleek and responsive design. \n- **Challenge**: No one on the team had strong design skills. \n- **Solution**: We conducted multiple design \"sprints\" where each team member created mockups and designs. We then reviewed and rated each other‚Äôs work, leading to small but steady improvements and a clean final product. \n\n## Development Process üöÄ \n\n### Workflow \n\nWe worked in weekly sprints and had a meeting during each class session. This structure helped us lead and manage the project efficiently. \n\n### Presentation \n\nTo present the site to the class, we created a modern and smooth presentation that matched the polished look of the website itself.",
        "coverImage": "https://moyadaniel.com/_astro/onderweg.CqxgaDvo_Z1YOOcF.webp",
        "repo": "https://github.com/DaniDevOfficial/eastern_front_blog",
        "live": "https://ukraine.ikbw.ch/",
        "tags": [
            "Fullstack",
            "React",
            "Firebase",
            "News",
            "Roles-System",
            "Group Project"
        ]
    },
    {
        "id": "4",
        "name": "Project 3",
        "description": "Description 2",
        "longText": "Long teasdfxt 2",
        "coverImage": "https://moyadaniel.com/_astro/onderweg.CqxgaDvo_Z1YOOcF.webp",
        "repo": "Github 2",
        "tags": [
            "Tag 1",
            "Tag 2"
        ]
    },
    {
        "id": "5",
        "name": "Project 4",
        "description": "Description 2",
        "longText": "# MostLikely/n**MostLikey** is a textbased multiplayer game to have a laugh with your friends. /n/n- **Frontend**: React, TypeScript, ChakraUI/n- **Backend**: Express.js, JavaScript/n- **Hosting**: Firebase, Render/n/n## Reason for Creation /n/nAfter the IDPA I had looked at a bit of socket.io and got interested. After reading about it a bit more I wantend to also wanted to create a multiplayer game with it, like many others did. Me and my friends played a lot of such textbased web-multiplayer games in our freetime, so I thought why not create my own with the knowlendge i had./n/n## My Contribution/n/nThis was a Solo Project so I did everything on my own. /n/n### Implementation/n/nBefore creating the app itself I looked at webSockets and implemented a simple chatapp with it to understand how sockets work and for what they are used for. After that i worked on backend and frontend simutaniously, so i was able to test the backend directly with the frontend. /n/n## Goals and Challenges/n/n### Real-Time Game Updates/n/n- **Goal**: The game should update on each connected device as soon as something happens in the lobby./n- **Challenge**: I implemented for each game-event a different \"Route\" as you would in a rest api, which bloated the code a bit and made it pretty hard to read./n- **Solution**: Instead of having a \"delete\" and \"winning\" event i switched to a few main events like a lobby join etc. and implemeted a \"updateGameState\" event, which would handle all the other interactions between players (not the best way but a simple and easy way)./n/n### Testing/n/n- **Goal**: Being able to test the gameloop quickly and efficiently./n- **Challenge**: I only teste the app by hand, which was pretty anoying, because I had to play thru a game each time to get to the desired testing spot./n- **Solution**: Sadly I only found out about things like **Cyphris** later, so I acctualy tested everything on my own./n/n## Development Process/n/n### Workflow/n/nI created this right after the IDPA during Spring break, to have it ready to show my friends when school starts again. I didn't have any kind of development plan and just firstly thought about gamestate handeling and how I would send updates to the clients and after that i just started implementing. I know that this isnt the best way to handle a project, but for me its the best way to learn, because i learn the most by simply doing and failing over and over until there is a finished product. /n/n",
        "coverImage": "https://moyadaniel.com/_astro/onderweg.CqxgaDvo_Z1YOOcF.webp",
        "repo": "Github 2",
        "tags": [
            "Tag 1",
            "Tag 2"
        ]
    }
]